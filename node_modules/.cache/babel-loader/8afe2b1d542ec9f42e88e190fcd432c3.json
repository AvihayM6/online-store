{"ast":null,"code":"import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nconst initialState = {\n  data: [{\n    id: '1',\n    name: 'Coffee',\n    description: 'Tasty Coffee',\n    price: 10\n  }, {\n    id: '2',\n    name: 'Chocolate',\n    description: 'Tasty Chocolate',\n    price: 30\n  }, {\n    id: '3',\n    name: 'Sugar',\n    description: 'Tasty Sugar',\n    price: 15\n  }]\n};\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    deleteProduct: (state, {\n      payload\n    }) => {\n      state.data = state.data.filter(product => product.id !== payload);\n    },\n    setSelectedProductId: (state, {\n      payload\n    }) => {\n      state.selectedProductId = payload;\n    },\n    saveProduct: (state, {\n      payload\n    }) => {\n      const productIndex = state.data.findIndex(product => product.id === payload.id);\n\n      if (productIndex) {\n        state.data[productIndex] = payload;\n      } else {\n        payload.id = uuid();\n        state.data.push(payload);\n      }\n    }\n  }\n});\nexport const {\n  deleteProduct,\n  setSelectedProductId,\n  saveProduct\n} = productsSlice.actions;\nexport const productsReducer = productsSlice.reducer;\nexport const selectProducts = state => state.products.data;\nexport const selectSelectedProductId = state => state.products.selectedProductId;\nexport const selectSelectedProduct = createSelector(selectProducts, selectSelectedProductId, (products, selectedProductId) => products.find(product => product.id === selectedProductId));","map":{"version":3,"sources":["/home/avihay/Desktop/96a8b0a0-7fe1-46e1-afc6-605b52aeb3e5/src/store/Products/index.ts"],"names":["createSlice","createSelector","v4","uuid","initialState","data","id","name","description","price","productsSlice","reducers","deleteProduct","state","payload","filter","product","setSelectedProductId","selectedProductId","saveProduct","productIndex","findIndex","push","actions","productsReducer","reducer","selectProducts","products","selectSelectedProductId","selectSelectedProduct","find"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA2D,kBAA3D;AAGA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CACJ;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,QAAjB;AAA2BC,IAAAA,WAAW,EAAE,cAAxC;AAAwDC,IAAAA,KAAK,EAAE;AAA/D,GADI,EAEJ;AAAEH,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,WAAjB;AAA8BC,IAAAA,WAAW,EAAE,iBAA3C;AAA8DC,IAAAA,KAAK,EAAE;AAArE,GAFI,EAGJ;AAAEH,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAE,OAAjB;AAA0BC,IAAAA,WAAW,EAAE,aAAvC;AAAsDC,IAAAA,KAAK,EAAE;AAA7D,GAHI;AADa,CAArB;AAQA,MAAMC,aAAa,GAAGV,WAAW,CAAC;AAChCO,EAAAA,IAAI,EAAE,UAD0B;AAEhCH,EAAAA,YAFgC;AAGhCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAA+C;AAC5DD,MAAAA,KAAK,CAACR,IAAN,GAAaQ,KAAK,CAACR,IAAN,CAAWU,MAAX,CAAmBC,OAAD,IAAaA,OAAO,CAACV,EAAR,KAAeQ,OAA9C,CAAb;AACD,KAHO;AAIRG,IAAAA,oBAAoB,EAAE,CACpBJ,KADoB,EAEpB;AAAEC,MAAAA;AAAF,KAFoB,KAGjB;AACHD,MAAAA,KAAK,CAACK,iBAAN,GAA0BJ,OAA1B;AACD,KATO;AAURK,IAAAA,WAAW,EAAE,CAACN,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAgD;AAC3D,YAAMM,YAAY,GAAGP,KAAK,CAACR,IAAN,CAAWgB,SAAX,CAAqBL,OAAO,IAAIA,OAAO,CAACV,EAAR,KAAeQ,OAAO,CAACR,EAAvD,CAArB;;AACA,UAAGc,YAAH,EAAiB;AACfP,QAAAA,KAAK,CAACR,IAAN,CAAWe,YAAX,IAA2BN,OAA3B;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,CAACR,EAAR,GAAaH,IAAI,EAAjB;AACAU,QAAAA,KAAK,CAACR,IAAN,CAAWiB,IAAX,CAAgBR,OAAhB;AACD;AACF;AAlBO;AAHsB,CAAD,CAAjC;AAyBA,OAAO,MAAM;AAAEF,EAAAA,aAAF;AAAiBK,EAAAA,oBAAjB;AAAuCE,EAAAA;AAAvC,IAAuDT,aAAa,CAACa,OAA3E;AACP,OAAO,MAAMC,eAAe,GAAGd,aAAa,CAACe,OAAtC;AAEP,OAAO,MAAMC,cAAc,GAAIb,KAAD,IAAsBA,KAAK,CAACc,QAAN,CAAetB,IAA5D;AACP,OAAO,MAAMuB,uBAAuB,GAAIf,KAAD,IACrCA,KAAK,CAACc,QAAN,CAAeT,iBADV;AAGP,OAAO,MAAMW,qBAAqB,GAAG5B,cAAc,CACjDyB,cADiD,EAEjDE,uBAFiD,EAGjD,CAACD,QAAD,EAAWT,iBAAX,KACES,QAAQ,CAACG,IAAT,CAAed,OAAD,IAAaA,OAAO,CAACV,EAAR,KAAeY,iBAA1C,CAJ+C,CAA5C","sourcesContent":["import { createSlice, createSelector, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '..'\nimport { Product } from '../../types/Product'\nimport { v4 as uuid } from 'uuid'\ninterface ProductsState {\n  selectedProductId?: string\n  data: Product[]\n}\n\nconst initialState = {\n  data: [\n    { id: '1', name: 'Coffee', description: 'Tasty Coffee', price: 10 },\n    { id: '2', name: 'Chocolate', description: 'Tasty Chocolate', price: 30 },\n    { id: '3', name: 'Sugar', description: 'Tasty Sugar', price: 15 },\n  ],\n} as ProductsState\n\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    deleteProduct: (state, { payload }: PayloadAction<string>) => {\n      state.data = state.data.filter((product) => product.id !== payload)\n    },\n    setSelectedProductId: (\n      state,\n      { payload }: PayloadAction<string | undefined>\n    ) => {\n      state.selectedProductId = payload\n    },\n    saveProduct: (state, { payload }: PayloadAction<Product>) => {\n      const productIndex = state.data.findIndex(product => product.id === payload.id)\n      if(productIndex) {\n        state.data[productIndex] = payload\n      } else {\n        payload.id = uuid()\n        state.data.push(payload)\n      }\n    },\n  },\n})\n\nexport const { deleteProduct, setSelectedProductId, saveProduct } = productsSlice.actions\nexport const productsReducer = productsSlice.reducer\n\nexport const selectProducts = (state: RootState) => state.products.data\nexport const selectSelectedProductId = (state: RootState) =>\n  state.products.selectedProductId\n\nexport const selectSelectedProduct = createSelector(\n  selectProducts,\n  selectSelectedProductId,\n  (products, selectedProductId) =>\n    products.find((product) => product.id === selectedProductId)\n)\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSelector, createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\nconst initialState = {\n  data: [{\n    id: '1',\n    name: 'Coffee',\n    description: 'Tasty Coffee',\n    price: 10\n  }, {\n    id: '2',\n    name: 'Chocolate',\n    description: 'Tasty Chocolate',\n    price: 30\n  }, {\n    id: '3',\n    name: 'Sugar',\n    description: 'Tasty Sugar',\n    price: 15\n  }],\n  search: ''\n};\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    deleteProduct: (state, {\n      payload\n    }) => {\n      state.data = state.data.filter(product => product.id !== payload);\n    },\n    setSelectedProductId: (state, {\n      payload\n    }) => {\n      state.selectedProductId = payload;\n    },\n    saveProduct: (state, {\n      payload\n    }) => {\n      if (!payload.id) {\n        payload.id = uuid();\n        state.data.push(payload);\n        return state;\n      }\n\n      const productIndex = state.data.findIndex(product => product.id === payload.id);\n      state.data[productIndex] = payload;\n    },\n    updateSearchTerm: (state, {\n      payload\n    }) => {\n      state.search = payload;\n    }\n  }\n});\nexport const {\n  deleteProduct,\n  setSelectedProductId,\n  saveProduct,\n  updateSearchTerm\n} = productsSlice.actions;\nexport const productsReducer = productsSlice.reducer;\nexport const selectProducts = state => state.products.data;\nexport const selectSelectedProductId = state => state.products.selectedProductId;\nexport const selectSelectedProduct = createSelector(selectProducts, selectSelectedProductId, (products, selectedProductId) => products.find(product => product.id === selectedProductId));\nexport const selectSearchTerm = state => state.products.search;\nexport const selectFilteredProducts = createSelector(selectProducts, selectSearchTerm, (products, searchTerm) => {\n  console.log(searchTerm);\n  return products.filter(product => product.name.toLowerCase().includes(searchTerm.toLowerCase()));\n});","map":{"version":3,"sources":["/home/avihay/Desktop/96a8b0a0-7fe1-46e1-afc6-605b52aeb3e5/src/store/Products/index.ts"],"names":["createSelector","createSlice","v4","uuid","initialState","data","id","name","description","price","search","productsSlice","reducers","deleteProduct","state","payload","filter","product","setSelectedProductId","selectedProductId","saveProduct","push","productIndex","findIndex","updateSearchTerm","actions","productsReducer","reducer","selectProducts","products","selectSelectedProductId","selectSelectedProduct","find","selectSearchTerm","selectFilteredProducts","searchTerm","console","log","toLowerCase","includes"],"mappings":"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","sourcesContent":["import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuid } from 'uuid'\nimport { RootState } from '..'\nimport { Product } from '../../types/Product'\ninterface ProductsState {\n  selectedProductId?: string\n  search: string\n  data: Product[]\n}\n\nconst initialState = {\n  data: [\n    { id: '1', name: 'Coffee', description: 'Tasty Coffee', price: 10 },\n    { id: '2', name: 'Chocolate', description: 'Tasty Chocolate', price: 30 },\n    { id: '3', name: 'Sugar', description: 'Tasty Sugar', price: 15 },\n  ],\n  search: '',\n} as ProductsState\n\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    deleteProduct: (state, { payload }: PayloadAction<string>) => {\n      state.data = state.data.filter((product) => product.id !== payload)\n    },\n    setSelectedProductId: (\n      state,\n      { payload }: PayloadAction<string | undefined>\n    ) => {\n      state.selectedProductId = payload\n    },\n    saveProduct: (state, { payload }: PayloadAction<Product>) => {\n      if (!payload.id) {\n        payload.id = uuid()\n        state.data.push(payload)\n        return state\n      }\n\n      const productIndex = state.data.findIndex(\n        (product) => product.id === payload.id\n      )\n      state.data[productIndex] = payload\n    },\n    updateSearchTerm: (state, { payload }: PayloadAction<string>) => {\n      state.search = payload\n    },\n  },\n})\n\nexport const {\n  deleteProduct,\n  setSelectedProductId,\n  saveProduct,\n  updateSearchTerm,\n} = productsSlice.actions\nexport const productsReducer = productsSlice.reducer\n\nexport const selectProducts = (state: RootState) => state.products.data\nexport const selectSelectedProductId = (state: RootState) =>\n  state.products.selectedProductId\n\nexport const selectSelectedProduct = createSelector(\n  selectProducts,\n  selectSelectedProductId,\n  (products, selectedProductId) =>\n    products.find((product) => product.id === selectedProductId)\n)\n\nexport const selectSearchTerm = (state: RootState) => state.products.search\n\nexport const selectFilteredProducts = createSelector(\n  selectProducts,\n  selectSearchTerm,\n  (products, searchTerm) => {\n    console.log(searchTerm)\n    return products.filter((product) => product.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  }\n)\n"]},"metadata":{},"sourceType":"module"}